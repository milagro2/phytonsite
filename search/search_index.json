{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>During my internship I worked togheter with Petrus Jacobus van der Walt (Kobus). He is a DevOps Engineer for Gall&amp;Gall. We worked on a couple different projects.</p> <p>In project 1 I learned how to make a pull request which was my first contribution. I also learned more about GitHub in general.  | Project 1 | Project 2 | Project 3 | Project 4 | Project 5 | | :--------------: | :---------------: | :---------------: | :---------------: | :---------------: | | This is what it looks like when its approved and merged | - | - | - | - | |  |  | | | |</p>"},{"location":"project1/","title":"Project 1 - Github / First open source contribution","text":"<p>For the first project, I learned a bit more about Github and how to use it.  I also made my first contribution. I did that using this tutorial.</p> <p>The first thing I did was to fork that repository by clicking the <code>fork</code> button. By doing this it created a copy of the repo into my account. I than went to my account, opened the forked repo and clicked on a <code>code</code> where I clicked on the 'copy to clipboard' icon. I opened a terminal in Visual Studios Code and put in this code:</p> <pre><code>git clone \"https://github.com/milagro2/first-contributions.git\"\n</code></pre> <p>With that I copied the contents of that repo to my pc (to VS-Code).  Then I this to get to the right directory:</p> <pre><code>cd first-contributions\n</code></pre> <p>Than to create a new branch I used this:</p> <pre><code>git switch -c ContBranch\n</code></pre> <p>I then opened the Contributors.md in VS-code, put my name somewhere in the middle and used <code>git status</code> to see the changes I made.  To add those changes to the branch and commit and push I used these commands:</p> <pre><code>git add Contributors.md\n\ngit commit -m \"Add Moreno  to Contributors list\"\n\ngit push -u origin ContBranch\n</code></pre> <p>After that I went to the repo, clicked on the <code>Pull request</code>, then on the <code>Compare and pull request</code> button and finaly on the <code>Create pull request</code> to submit it all.  Then the changes got merged into the main branch. This is what the pull request looks like.</p>"},{"location":"project2/","title":"Project 2 - Python site with MkDocs","text":"<p>For project 2 I learned how to make this website using MkDocs. I used this tutorial.</p> <p>The first thing I did was open Python and run this command in the terminal:</p> <pre><code>pip install mkdocs\n</code></pre> <p>Next I ran this command to create a new project:</p> <pre><code>mkdocs new my-poject\ncd my-project\n</code></pre> <p>Then I used <code>mkdocs serve</code> to get the server running and when I went to <code>http://127.0.0.1:8000/</code> in my browser where it displayed the MkDocs website. By going into the mkdocs.yml file I could change the <code>site_name</code> which was immediately visible in the browser. This is what the mkdocs.yml looks like:</p> <pre><code>site_name: Python Projects\nsite_url: https://pythonprojects.com/\nnav:\n  - Home: index.md\n  - Agile: https://milagro2.github.io./Agile.html\n  - Projects:\n      - Project 1 - Github / First Open Source Contribution: project1.md\n      - Project 2 - Python site with MkDocs: project2.md\n      - Project 3 - File name convention checker: project3.md\n      - Project 4 - Variable name convention checker: project4.md\n\ntheme: material\n</code></pre> <p>Its easy to add pages and sub-pages in the nav.  For the theme I first put this command in the terminal:</p> <pre><code>pip install mkdocs-material\n</code></pre> <p>And wrote <code>material</code> behind theme in mkdocs.yml. MkDocs comes with two built in themes: <code>mkdocs</code> and <code>readthedocs</code> but I found more themes made by other people here.  I then used this to build a documentation:</p> <pre><code>mkdocs build\n</code></pre> <p>To look inside the directory I used:</p> <pre><code>$ ls site\n</code></pre> <p>And thats how i made this website using Python and MkDocs.</p>"},{"location":"project3/","title":"Project 3 - File name convention checker","text":"<p>In project 3, I wrote a Python script that reads all the filenames and checks if the name is correct or not. The name is correct when it has a specific word in front of it. Then it makes a list of the correct and the incorrect files and gives an error so you know which file names to fix.</p> <p></p> The code to check the filenames The result, sorted filenames The code to check the filename: <pre><code>import os\nimport sys\n\nfolder_path = \"projects/project3/TestFiles\"\nfile_list = os.listdir(folder_path)\n\ngood_files = []\nbad_files = []\nfor file_name in file_list:\n    file_path = os.path.join(folder_path, file_name)\n    if os.path.isfile(file_path):\n        if file_name.startswith('BusinessRule_ba_'):\n            good_files.append(file_path)\n        else:\n            bad_files.append(file_path)\nif good_files:\n    print(\"These are correct:\")\n    for good_file in good_files:\n        print(good_file)\nelse:\n    print(\"No correct filenames found.\")\nif bad_files:\n    print(\"\\nThese are bad:\")\n    for bad_file in bad_files:\n        print(bad_file)\n    print(\"\\nError: We found files that violate the naming convention\")\n    sys.exit(1)\n\nelse:\n    print(\"\\nAll filenames are correct.\")\n</code></pre>"},{"location":"project4/","title":"project 4","text":"<p>In project 4 I wrote a python script that reads the JSON Objects from all the files, than it prints the alias, value and contract. In most cases it just checks if the alias is the same as the value and that it prints 'alias and value are correct (:' but sometimes the alias and the value can be different. That is when the contract has a specific name, for that there are if-statements to apply different rules. </p> The code to check the variables The result, checked variables"},{"location":"project5/","title":"Project 5 - Age verification with fastAPI","text":"<p>For project 5 the plan was to make an application that where you can upload an image to and than it checks if the person is 18 years or older.</p> <p>The first thing I did was to learn more about <code>Docker</code> and how to use it. For that I used this link.  Than I leaned a bit about how to use <code>fastAPI</code> using this tutorial. And I added an endpoint, the code looks like this in Python:</p> <pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"Hello, World!\"}\n\n@app.get(\"/hello\")\ndef read_hello():\n    return {\"message\": \"Hello!\"}\n</code></pre> <p>I also used this tutorial to learn more about fastAPI, but also how to create a Dockerfile, an image and a container in Docker. Now the Dockerfile looks like this: </p> <pre><code># Use the official Python base image\nFROM python:3.9-slim\n\n# Set the working directory inside the container\nWORKDIR /app\n\n# Copy the requirements file to the working directory\nCOPY requirements.txt .\n\n# Install the Python dependencies\nRUN pip install -r requirements.txt\n\n# Copy the application code to the working directory\nCOPY . .\n\n# Expose the port on which the application will run\nEXPOSE 8000\n\n# Run the FastAPI application using uvicorn server\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n</code></pre> <p>I also needed to create an requirements.txt, a file with names of the required packages. In this case it looks like this:</p> <pre><code>fastapi==0.83.0\nuvicorn==0.17.0\n</code></pre> <p>Than I used this command to create an image in Docker: </p> <pre><code>docker build -t fastapi-hello-world .\n</code></pre> <p>And to run it I used this command, which also creates a container:</p> <pre><code>docker run -p 8000:8000 fastapi-hello-world\n</code></pre> <p>After this I created a repository in GitHub where I added the Python code. I than learned about <code>Railway</code> which is an application that makes it easy to host websites and  integrate workflows. First I linked my GitHub account to Railway, then I clicked on 'new' and than 'GitHub repo' and clicked on the repo with the fastAPI project. This deployed the repo into Railway. I then went to settings and generated a domain and called it gall-age-verify.up.railway.app. That is the link to go to the fastAPI app. Next I clicked on 'variables' and 'New variable' and named it 'PORT' and gave it the value 8000 which, in the Dockerfile I changed it from 8080 to 8000. This way Railway and the app are on the same port and now the app is hosting online.  Im now gonna create an endpoint where you can upload an image to and it show the resolution.</p>"},{"location":"projects/","title":"Projects","text":"<p>You can find the projects I have worked on in the sub-section</p>"}]}